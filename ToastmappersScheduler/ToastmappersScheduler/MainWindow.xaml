<Window x:Class="Toastmappers.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:System="clr-namespace:System;assembly=mscorlib"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:self="clr"
        xmlns:local="clr-namespace:Toastmappers"
        mc:Ignorable="d"
        Loaded="Window_Loaded"
        WindowStartupLocation="CenterScreen"
        Title="Club Scheduler" Height="450" Width="800">
  <Window.Resources>
    <BooleanToVisibilityConverter x:Key="Bool2Vis" />
    <local:InverseBoolConverter x:Key="InverseBool" />
    <DataTemplate x:Key="RegularTemplate">
      <DataGrid ItemsSource="{Binding Meetings}" AutoGenerateColumns="False" >
        <DataGrid.LayoutTransform>
          <TransformGroup>
            <RotateTransform Angle="90"/>
            <MatrixTransform Matrix="-1,0,0,1,0,0"></MatrixTransform>
          </TransformGroup>
        </DataGrid.LayoutTransform>
        <DataGrid.ColumnHeaderStyle>
          <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource {x:Type DataGridColumnHeader}}">
            <Setter Property="LayoutTransform">
              <Setter.Value>
                <TransformGroup>
                  <RotateTransform Angle="-90"/>
                  <ScaleTransform ScaleX="1" ScaleY="-1"/>
                </TransformGroup>
              </Setter.Value>
            </Setter>
          </Style>
        </DataGrid.ColumnHeaderStyle>
        <DataGrid.CellStyle>
          <Style TargetType="DataGridCell">
            <Setter Property="LayoutTransform">
              <Setter.Value>
                <TransformGroup>
                  <RotateTransform Angle="-90"/>
                  <ScaleTransform ScaleX="1" ScaleY="-1"/>
                </TransformGroup>
              </Setter.Value>
            </Setter>
          </Style>
        </DataGrid.CellStyle>
        <DataGrid.Columns>
          <DataGridTextColumn Header="DayOfMeeting" Binding="{Binding Path=DayOfMeeting, StringFormat=d}"/>
          <DataGridTextColumn Header="Toastmaster" Binding="{Binding Path=Toastmaster.Name}"/>
          <DataGridTextColumn Header="Speaker 1" Binding="{Binding Path=Speaker1.Name}"/>
          <DataGridTextColumn Header="Speaker 2" Binding="{Binding Path=Speaker2.Name}"/>
          <DataGridTextColumn Header="GE" Binding="{Binding Path=GeneralEvaluator.Name}"/>
          <DataGridTextColumn Header="Evaluator 1" Binding="{Binding Path=Evaluator1.Name}"/>
          <DataGridTextColumn Header="Evaluator 2" Binding="{Binding Path=Evaluator2.Name}"/>
          <DataGridTextColumn Header="TT" Binding="{Binding Path=TT.Name}"/>
          <DataGridTextColumn Header="Ah" Binding="{Binding Path=Ah.Name}"/>
          <DataGridTextColumn Header="Gram" Binding="{Binding Path=Gram.Name}"/>
          <DataGridTextColumn Header="Timer" Binding="{Binding Path=Timer.Name}"/>
          <DataGridTextColumn Header="Quiz" Binding="{Binding Path=Quiz.Name}"/>
          <DataGridTextColumn Header="Video" Binding="{Binding Path=Video.Name}"/>
          <DataGridTextColumn Header="HotSeat" Binding="{Binding Path=HotSeat.Name}"/>
          <!--public List
              <int>Attendees { get; set; }
    public MemberModel TTWinner { get; set; }
    public List
                <int>TTContestants { get; set; }-->
          <!--<DataGridTextColumn Header="Day of Meeting"/>-->
        </DataGrid.Columns>
      </DataGrid>
    </DataTemplate>
    <DataTemplate x:Key="MemberInfo">
      <StackPanel>
        <CheckBox Content="Is Current" IsChecked="{Binding CurrentMemberEdit.IsCurrent, Mode=TwoWay}"/>
        <CheckBox Content="Can be Toastmaster" IsChecked="{Binding CurrentMemberEdit.CanBeToastmaster, Mode=TwoWay}"/>
        <CheckBox Content="Can be Evaluator" IsChecked="{Binding CurrentMemberEdit.CanBeEvaluator, Mode=TwoWay}"/>
        <!--<CheckBox Content="Is Current" IsChecked="{Binding IsCurrent, Mode=TwoWay}"/>
      <CheckBox Content="Is Current" IsChecked="{Binding IsCurrent, Mode=TwoWay}"/>-->
      </StackPanel>
    </DataTemplate>
    <Style x:Key="MentorListStyle" TargetType="{x:Type ListBoxItem}">
      <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
      <Setter Property="VerticalContentAlignment" Value="Stretch"/>
      <Setter Property="IsSelected" Value="{Binding Mode=TwoWay, Path=IsSelected}"/>
      <!--Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}"/-->
      <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
      <!--<EventSetter Event="PreviewMouseWheel" Handler="HandlePreviewMouseWheel"/>-->
      <!--<Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="ListBoxItem">
            <Grid Margin="0,1,0,1" Focusable="False" Background="Transparent">
              <Grid.ContextMenu>
                <ContextMenu>
                  <MenuItem Header="Remove" Command="{Binding Path=DataContext.OnDel,RelativeSource={RelativeSource TemplatedParent}}"/>
                  --><!--<MenuItem Header="{x:Static res:Resources.common_MoveUp}" Command="{Binding Path=DataContext.OnUp,RelativeSource={RelativeSource TemplatedParent}}"/>
                  <MenuItem Header="{x:Static res:Resources.common_MoveDown}" Command="{Binding Path=DataContext.OnDown,RelativeSource={RelativeSource TemplatedParent}}"/>
                  <MenuItem Header="{x:Static res:Resources.common_RemoveAll}" Command="{Binding Path=DataContext.OnDelAll,RelativeSource={RelativeSource TemplatedParent}}"/>-->
                  <!--<MenuItem Header="Remove" Command="{Binding Path=OnDel}"/>--><!--
                </ContextMenu>
              </Grid.ContextMenu>
              <Rectangle Fill="{TemplateBinding Background}" Width="5" HorizontalAlignment="Left">
                --><!--<Rectangle.ToolTip>
                  --><!--<TextBlock Style="{StaticResource rowIDTextStyle}"/>--><!--
                </Rectangle.ToolTip>--><!--
              </Rectangle>
              <Button Name="btRm" Command="{Binding Path=DataContext.OnDel,RelativeSource={RelativeSource TemplatedParent}}"
                  Focusable="False" Width="14" Height="14" CommandParameter="{Binding}"
                  Margin="0" Padding="0"
                  ToolTip="Remove"
                  VerticalAlignment="Center" HorizontalAlignment="Left"
                  HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                  BorderThickness="0" Content="X"
                  Visibility="Hidden">
                --><!--<Image Margin="0" Width="12" Height="12" Source="{StaticResource GenericDeleteRed16}" />--><!--
              </Button>
              --><!-- <ContentPresenter IsHitTestVisible="False" ContentTemplate="{StaticResource IndexColumnTemplate}" Width="8" HorizontalAlignment="Left"/> 
                   IsEnabled="{Binding Path=DataContext.IsValueEnabled,RelativeSource={RelativeSource TemplatedParent}}"
              -->
              <!--<ContentPresenter Content="{TemplateBinding Content}"
                  ContentTemplate="{TemplateBinding ContentTemplate}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  PreviewMouseDown="HandlePreviewMouseDown"/>--><!--
            </Grid>
            <ControlTemplate.Triggers>
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  --><!--<Condition Property="Selector.IsSelected" Value="True"/>--><!--
                  <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="btRm" Property="Visibility" Value="Visible"/>
              </MultiTrigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>-->
      <Style.Triggers>
        <!--<Trigger Property="Selector.IsSelected" Value="True">
          <Setter Property="Background" Value="{DynamicResource Esri_Blue6}" />
        </Trigger>-->
        <!-- IsKeyboardFocusWithin
        <Trigger Property="Selector.IsSelectionActive" Value="False">
          <Setter Property="Background" Value="{DynamicResource Esri_Gray100}" />
        </Trigger>-->
        <MultiTrigger>
          <MultiTrigger.Conditions>
            <Condition Property="Selector.IsSelected" Value="True"/>
            <Condition Property="Selector.IsSelectionActive" Value="False"/>
          </MultiTrigger.Conditions>
          <Setter Property="Background" Value="Gray"/>
        </MultiTrigger>

        <Trigger Property="IsMouseOver" Value="True">
          <Setter Property="Background" Value="Blue" />
        </Trigger>
        <MultiTrigger>
          <MultiTrigger.Conditions>
            <Condition Property="IsMouseOver" Value="True"/>
            <Condition Property="Selector.IsSelected" Value="True"/>
          </MultiTrigger.Conditions>
          <Setter Property="Background" Value="Blue"/>
        </MultiTrigger>
      </Style.Triggers>

    </Style>
  </Window.Resources>
  <DockPanel>

    <TabControl TabStripPlacement="Left" Margin="0,0,0,10"  >
      <TabItem Name="General" Header="General" DataContext="{Binding Tabs[0]}">
        <!--<Button Margin="10" Width="100" Height="25" HorizontalAlignment="Left" >New Member</Button>-->

      </TabItem>
      <TabItem Name="Members" Header="Members" DataContext="{Binding Tabs[1]}">
        <StackPanel>
          <TextBlock Text="Member Information" Margin="10,10,10,10"/>
          <DockPanel HorizontalAlignment="Left" LastChildFill="False">
            <ComboBox Name="MemberInfoComboBox" Margin="10" Width="150" Height="25" HorizontalAlignment="Left" 
                    ItemsSource="{Binding Members}" DisplayMemberPath="Name" 
                      SelectedValue="{Binding SetMemberRoleStatus}" DropDownClosed="ComboBox_DropDownClosed"/>
            <Button Name="MoveMember" Content="Move To Past Members" Margin="10" Width="150" Height="25" Command="{Binding MoveToPastMembersCmd}"
                    IsEnabled="{Binding MemberSet}"/>
            <Button Margin="10" Width="100" Height="25" HorizontalAlignment="Left" Content="New Member" 
                    Command="{Binding NewMemberCmd}"/>
            <Button Margin="10" Width="100" Height="25" Content="Save" Command="{Binding SaveMembersCmd}"/>
          </DockPanel>
          <!--members vm-->
          <TabControl>
            <TabItem  Header="General" Padding="5">
              <StackPanel>

                <DockPanel HorizontalAlignment="Left" LastChildFill="False">
                  <!--<ComboBox Margin="10" Width="150" Height="25" HorizontalAlignment="Left" 
                    ItemsSource="{Binding Members}" DisplayMemberPath="Name" SelectedValuePath="Name"
                      SelectedValue="{Binding MemberToEdit}"/>-->

                  <!--<Button Margin="10" Width="100" Height="25" HorizontalAlignment="Left" Command="{Binding EditMemberCmd}">Edit Member</Button>-->
                </DockPanel>
                <StackPanel Width="600" HorizontalAlignment="Left">
                  <DockPanel HorizontalAlignment="Left" Width="600" LastChildFill="True">
                    <StackPanel Margin="10,10,0,0" Width="180">
                      <CheckBox Content="Is Current" IsChecked="{Binding SetMemberRoleStatus.IsCurrent, Mode=TwoWay}" IsEnabled="{Binding MemberSet}"/>
                      <CheckBox Content="Can be Toastmaster" IsChecked="{Binding SetMemberRoleStatus.CanBeToastmaster, Mode=TwoWay}" IsEnabled="{Binding MemberSet}"/>
                      <CheckBox Content="Can Be Evaluator" IsChecked="{Binding SetMemberRoleStatus.CanBeEvaluator, Mode=TwoWay}" IsEnabled="{Binding MemberSet}"/>
                      <CheckBox Content="Has been an officer" IsChecked="{Binding SetMemberRoleStatus.HasBeenOfficer}" IsEnabled="{Binding MemberSet}" />
                      <DockPanel LastChildFill="True">
                        <TextBlock Text="Member ID" Width="70"/>
                        <TextBox Text="{Binding SetMemberRoleStatus.ID}"/>
                      </DockPanel>
                      <StackPanel Grid.Row="3" Grid.ColumnSpan="2">
                        <TextBlock  Text="Mentors" HorizontalAlignment="Center"/>
                        <ComboBox Name="MentorsCombo" ItemsSource="{Binding MentorsMembersList}" DropDownClosed="MentorsCombo_DropDownClosed"/>

                        <ListBox ItemsSource="{Binding SetMemberRoleStatus.Mentors}">
                          <ListBox.ItemContainerStyle>
                            <Style TargetType="{x:Type ListBoxItem}">
                              <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                              <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                              <Setter Property="IsSelected" Value="{Binding Mode=TwoWay, Path=IsSelected}"/>
                              <!--Setter Property="FocusManager.FocusedElement" Value="{Binding RelativeSource={RelativeSource Self}}"/-->
                              <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                              <!--<EventSetter Event="PreviewMouseWheel" Handler="HandlePreviewMouseWheel"/>-->
                              <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate TargetType="ListBoxItem">
            <Grid Margin="0,1,0,1" Focusable="False" Background="Transparent">
              <Grid.ContextMenu>
                <ContextMenu>
                  <MenuItem Header="Remove" Command="{Binding Path=DataContext.OnDel,RelativeSource={RelativeSource TemplatedParent}}"/>
                  
                              <MenuItem Header="MoveUp" Command="{Binding Path=DataContext.OnUp,RelativeSource={RelativeSource TemplatedParent}}"/>
                  <MenuItem Header="MoveDown" Command="{Binding Path=DataContext.OnDown,RelativeSource={RelativeSource TemplatedParent}}"/>
                  <MenuItem Header="RemoveAll" Command="{Binding Path=DataContext.OnDelAll,RelativeSource={RelativeSource TemplatedParent}}"/>
                              
                </ContextMenu>
              </Grid.ContextMenu>
              <Rectangle Fill="{TemplateBinding Background}" Width="5" HorizontalAlignment="Left">
                
                              <Rectangle.ToolTip>
                  
                              <TextBlock />
                              
                </Rectangle.ToolTip>
                              
              </Rectangle>
              <Button Name="btRm" Command="{Binding Path=DataContext.OnDel,RelativeSource={RelativeSource TemplatedParent}}"
                  Focusable="False" Width="14" Height="14" CommandParameter="{Binding}"
                  Margin="0" Padding="0"
                  ToolTip="Remove"
                  VerticalAlignment="Center" HorizontalAlignment="Left"
                  HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                  BorderThickness="0" Content="X"
                  Visibility="Hidden">
                
                                                            
              </Button>
              
                               <ContentPresenter IsHitTestVisible="False" Width="8" HorizontalAlignment="Left"/> 
                   
              
                              <ContentPresenter Content="{TemplateBinding Content}"
                  ContentTemplate="{TemplateBinding ContentTemplate}"
                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  />
                              
            </Grid>
            <ControlTemplate.Triggers>
              <MultiTrigger>
                <MultiTrigger.Conditions>
                  
                              <Condition Property="Selector.IsSelected" Value="True"/>
                              
                  <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="btRm" Property="Visibility" Value="Visible"/>
              </MultiTrigger>
            </ControlTemplate.Triggers>
          </ControlTemplate>
        </Setter.Value>
      </Setter>
                              <Style.Triggers>
                                <!--<Trigger Property="Selector.IsSelected" Value="True">
          <Setter Property="Background" Value="{DynamicResource Esri_Blue6}" />
        </Trigger>-->
                                <!-- IsKeyboardFocusWithin
        <Trigger Property="Selector.IsSelectionActive" Value="False">
          <Setter Property="Background" Value="{DynamicResource Esri_Gray100}" />
        </Trigger>-->
                                <MultiTrigger>
                                  <MultiTrigger.Conditions>
                                    <Condition Property="Selector.IsSelected" Value="True"/>
                                    <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                  </MultiTrigger.Conditions>
                                  <Setter Property="Background" Value="Gray"/>
                                </MultiTrigger>

                                <Trigger Property="IsMouseOver" Value="True">
                                  <Setter Property="Background" Value="Blue" />
                                </Trigger>
                                <MultiTrigger>
                                  <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="Selector.IsSelected" Value="True"/>
                                  </MultiTrigger.Conditions>
                                  <Setter Property="Background" Value="Blue"/>
                                </MultiTrigger>
                              </Style.Triggers>

                            </Style>
                          </ListBox.ItemContainerStyle>

                        </ListBox>
                      </StackPanel>
                    </StackPanel>
                    <StackPanel Width="200" HorizontalAlignment="Left">
                      <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">

                        <TextBlock Text="Meetings Out" Padding="10,0,10,0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <Button Width="50" Content="Clear" Click="Button_Click" IsEnabled="{Binding MemberSet}" />
                      </StackPanel>
                      <Calendar Name="MeetingsOutCalendar" SelectionMode="MultipleRange" DisplayDateStart="" SelectedDatesChanged="Calendar_SelectedDatesChanged"
                                IsTodayHighlighted="False" IsEnabled="{Binding MemberSet}">
                      </Calendar>



                    </StackPanel>
                    <StackPanel>
                      <ComboBox Name="MeetingRoles" ItemsSource="{Binding Roles}" SelectionChanged="ComboBox_SelectionChanged"/>
                      <ListBox Height="150" Name="MeetingRoleList"/>
                     </StackPanel>
                  </DockPanel>
                </StackPanel>

              </StackPanel>
            </TabItem>
            <TabItem Header="Role History" Padding="5">
              <StackPanel Width="600" HorizontalAlignment="Left">
                <!--<DockPanel HorizontalAlignment="Left" LastChildFill="False">-->

                <!--<ListBox ItemsSource="{Binding Roles}" Width="80" ></ListBox>-->
                <WrapPanel >
                  <TextBlock  Width="100" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="20,0,0,0" Text="Toastmaster"/>
                  <DatePicker   SelectedDate="{Binding SetMemberRoleStatus.Toastmaster}" Width="100" Margin="10,0,0,0"/>
                </WrapPanel>

                <WrapPanel>
                  <TextBlock Width="100" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="20,0,0,0" Text="Speaker"/>
                  <DatePicker SelectedDate="{Binding SetMemberRoleStatus.Speaker}" Width="100" Margin="10,0,0,0"/>
                </WrapPanel>

                <WrapPanel >
                  <TextBlock  Width="100" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="20,0,0,0" Text="Evaluator"/>
                  <DatePicker  SelectedDate="{Binding SetMemberRoleStatus.Evaluator}" Width="100" Margin="10,0,0,0"/>
                </WrapPanel>

                <WrapPanel>
                  <TextBlock Width="100" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="20,0,0,0" Text="General Evaluator"/>
                  <DatePicker SelectedDate="{Binding SetMemberRoleStatus.GeneralEvaluator}" Width="100" Margin="10,0,0,0"/>
                </WrapPanel>

                <WrapPanel >
                  <TextBlock  Width="100" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="20,0,0,0" Text="Table Topics"/>
                  <DatePicker  SelectedDate="{Binding SetMemberRoleStatus.TT}" Width="100" Margin="10,0,0,0"/>
                </WrapPanel>

                <WrapPanel>
                  <TextBlock Width="100" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="20,0,0,0" Text="Ah Counter"/>
                  <DatePicker SelectedDate="{Binding SetMemberRoleStatus.Ah}" Width="100" Margin="10,0,0,0"/>
                </WrapPanel>

                <WrapPanel >
                  <TextBlock  Width="100" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="20,0,0,0" Text="Timer"/>
                  <DatePicker  SelectedDate="{Binding SetMemberRoleStatus.Timer}" Width="100" Margin="10,0,0,0"/>
                </WrapPanel>

                <WrapPanel>
                  <TextBlock Width="100" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="20,0,0,0" Text="Grammarian"/>
                  <DatePicker SelectedDate="{Binding SetMemberRoleStatus.Gram}" Width="100" Margin="10,0,0,0"/>
                </WrapPanel>

                <WrapPanel>
                  <TextBlock Width="100" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="20,0,0,0" Text="Quiz Master"/>
                  <DatePicker SelectedDate="{Binding SetMemberRoleStatus.Quiz}" Width="100" Margin="10,0,0,0"/>
                </WrapPanel>

                <WrapPanel >
                  <TextBlock  Width="100" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="20,0,0,0" Text="Video"/>
                  <DatePicker  SelectedDate="{Binding SetMemberRoleStatus.Video}" Width="100" Margin="10,0,0,0"/>
                </WrapPanel>

                <WrapPanel>
                  <TextBlock Width="100" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="20,0,0,0" Text="Hot Seat"/>
                  <DatePicker SelectedDate="{Binding SetMemberRoleStatus.HotSeat}" Width="100" Margin="10,0,0,0"/>
                </WrapPanel>

                <!--<Button Width="50" Margin="20,10,0,0" HorizontalAlignment="Left" Content="Save"/>-->
              </StackPanel>
            </TabItem>
            <TabItem Header="Speech History" Padding="7">

            </TabItem>

            <TabItem Header="Past Members" Padding="7">

            </TabItem>
          </TabControl>
        </StackPanel>
      </TabItem>
      <!--<TabItem Name="Members" Header="Members">
        <FlowDocumentScrollViewer>
          <FlowDocument>
            <Paragraph FontSize="14" Margin="0">Members</Paragraph>
            <Paragraph FontStyle="Normal" TextAlignment="Left" FontSize="14" Foreground="Black">List of Members</Paragraph>
            <ButtonBase>
              
            </ButtonBase>
            <BlockUIContainer>
              <ListView BorderThickness="0" ItemsSource="{Binding Scheduler.Member}">
                <ListView.View>
                  <GridView>
                    <GridViewColumn Header="Member" DisplayMemberBinding="{Binding Name}" Width="150"/>
                    <GridViewColumn Header="Title" DisplayMemberBinding="{Binding Title}" Width="75"/>
                  </GridView>
                </ListView.View>
              </ListView>
            </BlockUIContainer>
          </FlowDocument>
        </FlowDocumentScrollViewer>
      </TabItem>-->
      <TabItem Name="Meetings" Header="Meetings" DataContext="{Binding Tabs[2]}" Margin="-2,0,0,-4">
        <StackPanel>
          <TextBlock Margin="10" FontSize="14">Meetings</TextBlock>
          <DockPanel Grid.Row="0" HorizontalAlignment="Left" LastChildFill="False">
            <!--<ComboBox ItemsSource="{Binding MeetingTemplates, Mode=OneWay}" SelectedValue="{Binding MeetingTemplate, Mode=TwoWay}"
                      SelectedValuePath="Key" DisplayMemberPath="Value" Width="150" Height="26"
                      SelectedValuePath="Key" DisplayMemberPath="Value" Width="150" Height="26"
                      IsSynchronizedWithCurrentItem="True" SelectedIndex="0"
                      />-->
            <ComboBox DockPanel.Dock="Left" Margin="10,0,0,0" ItemsSource="{Binding MeetingTemplates}" SelectedIndex="0" SelectedItem="{Binding MeetingTemplate}"/>
            <DatePicker DockPanel.Dock="Left" SelectedDate="{Binding MeetingDate, Mode=TwoWay}" Margin="20, 0,0,0" IsEnabled="{Binding IsGenerateForMonth}"/>
            <CheckBox DockPanel.Dock="Left" Margin="20,5,0,0" IsChecked="{Binding GenerateForMonth, Mode=TwoWay}" Content="Generate for the month"/>
            <CheckBox DockPanel.Dock="Left" Margin="20,5,0,0" IsChecked="{Binding GenerateForFriday, Mode=TwoWay}" Content="Generate for Friday" IsEnabled="{Binding IsGenerateForMonth, Converter={StaticResource InverseBool}}"/>
            <ComboBox DockPanel.Dock="Left" Margin="10,0,0,0" ItemsSource="{Binding Months}" SelectedIndex="0" SelectedItem="{Binding MonthToGenerateFor}"/>
            <DatePicker DockPanel.Dock="Left" SelectedDate="{Binding MeetingDateMonth, Mode=TwoWay}" Margin="20, 0,0,0"
                        IsEnabled="{Binding IsGenerateForMonth, Converter={StaticResource InverseBool}}" Visibility="Collapsed"/>
          </DockPanel>
          <DockPanel HorizontalAlignment="Left" LastChildFill="False">
            <Button Margin="10" Width="130" Height="25" HorizontalAlignment="Left" Command="{Binding GenerateMeetingCmd}" Content="Generate Meeting" 
                  IsEnabled="{Binding GenerateButtonEnabled}"/>
            <Button Name="resetBtn" Content="Reset" Command="{Binding ResetCmd}"
                    Margin="10" Width="70" Height="25" IsEnabled="{Binding ResetButtonEnabled}" />
            <Button Name="clearBtn" Content="Clear" Command="{Binding ClearCmd}"
                    Margin="10" Width="70" Height="25" IsEnabled="{Binding ResetButtonEnabled}" />
            <Button Name="okBtn" Content="Save" Command="{Binding OKCmd}"
                    Margin="10" Width="70" Height="25"  />
          </DockPanel>
          <!--<DockPanel LastChildFill="False" HorizontalAlignment="Left">-->
            <!--<ListBox Name="lstHeader" DockPanel.Dock="Left" ScrollViewer.HorizontalScrollBarVisibility="Disabled" HorizontalContentAlignment="Stretch"
                     ItemsSource="{Binding CurrentMeetingTemplate}" Visibility="{Binding RoleListVisible, Converter={StaticResource Bool2Vis}}"/>


            <ListBox Name="lstRoles" ScrollViewer.HorizontalScrollBarVisibility="Disabled" HorizontalContentAlignment="Stretch" 
                     ItemsSource="{Binding CurrentMeeting}" Visibility="{Binding RoleListVisible, Converter={StaticResource Bool2Vis}}"/>

            --><!--<ListBox.ItemTemplate>
                <DataTemplate>
                  <ComboBox Name="cmbRole" SelectedValue="{Binding FK_ServiceID,Mode=TwoWay}" ItemsSource="{Binding ElementName=wndMain, Path=DataContext.AllServices,Mode=OneTime}"  SelectedValuePath="ID" DisplayMemberPath="Name"  Grid.Column="0" ></ComboBox>

                </DataTemplate>
              </ListBox.ItemTemplate>--><!--

          </DockPanel>-->
          <StackPanel>
          <DataGrid ItemsSource="{Binding CurrentMeeting}" AutoGenerateColumns="False" Visibility="Visible">
            <DataGrid.LayoutTransform>
              <TransformGroup>
                <RotateTransform Angle="90"/>
                <MatrixTransform Matrix="-1,0,0,1,0,0"></MatrixTransform>
              </TransformGroup>
            </DataGrid.LayoutTransform>
            <DataGrid.ColumnHeaderStyle>
              <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource {x:Type DataGridColumnHeader}}">
                <Setter Property="LayoutTransform">
                  <Setter.Value>
                    <TransformGroup>
                      <RotateTransform Angle="-90"/>
                      <ScaleTransform ScaleX="1" ScaleY="-1"/>
                    </TransformGroup>
                  </Setter.Value>
                </Setter>
              </Style>
            </DataGrid.ColumnHeaderStyle>
            <DataGrid.CellStyle>
              <Style TargetType="DataGridCell">
                <Setter Property="LayoutTransform">
                  <Setter.Value>
                    <TransformGroup>
                      <RotateTransform Angle="-90"/>
                      <ScaleTransform ScaleX="1" ScaleY="-1"/>
                    </TransformGroup>
                  </Setter.Value>
                </Setter>
              </Style>
            </DataGrid.CellStyle>
            <DataGrid.Columns>
              <DataGridTextColumn Header="DayOfMeeting" Binding="{Binding Path=DayOfMeeting, StringFormat=d}"/>
              <DataGridTextColumn Header="Toastmaster" Binding="{Binding Path=Toastmaster.Name}"/>
              <DataGridTextColumn Header="Speaker 1" Binding="{Binding Path=Speaker1.Name}"/>
              <DataGridTextColumn Header="Speaker 2" Binding="{Binding Path=Speaker2.Name}"/>
              <DataGridTextColumn Header="GE" Binding="{Binding Path=GeneralEvaluator.Name}"/>
              <DataGridTextColumn Header="Evaluator 1" Binding="{Binding Path=Evaluator1.Name}"/>
              <DataGridTextColumn Header="Evaluator 2" Binding="{Binding Path=Evaluator2.Name}"/>
              <DataGridTextColumn Header="TT" Binding="{Binding Path=TT.Name}"/>
              <DataGridTextColumn Header="Ah" Binding="{Binding Path=Ah.Name}"/>
              <DataGridTextColumn Header="Gram" Binding="{Binding Path=Gram.Name}"/>
              <DataGridTextColumn Header="Timer" Binding="{Binding Path=Timer.Name}"/>
              <DataGridTextColumn Header="Quiz" Binding="{Binding Path=Quiz.Name}"/>
              <DataGridTextColumn Header="Video" Binding="{Binding Path=Video.Name}"/>
              <DataGridTextColumn Header="HotSeat" Binding="{Binding Path=HotSeat.Name}"/>
              <DataGridTextColumn Header="Day of Meeting"/>

            </DataGrid.Columns>
          </DataGrid>
          </StackPanel>
        </StackPanel>

      </TabItem>
      <TabItem Name="Reports" Header="Reports" DataContext="{Binding Tabs[3]}" Margin="-2,2,0,-2">
        <!--<DataGrid ItemsSource="{Binding Meetings}" AutoGenerateColumns="False" >
          <DataGrid.LayoutTransform>
            <TransformGroup>
              <RotateTransform Angle="90"/>
              <MatrixTransform Matrix="-1,0,0,1,0,0"></MatrixTransform>
            </TransformGroup>
          </DataGrid.LayoutTransform>
          <DataGrid.ColumnHeaderStyle>
            <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource {x:Type DataGridColumnHeader}}">
              <Setter Property="LayoutTransform">
                <Setter.Value>
                  <TransformGroup>
                    <RotateTransform Angle="-90"/>
                    <ScaleTransform ScaleX="1" ScaleY="-1"/>
                  </TransformGroup>
                </Setter.Value>
              </Setter>
            </Style>
          </DataGrid.ColumnHeaderStyle>
          <DataGrid.CellStyle>
            <Style TargetType="DataGridCell">
              <Setter Property="LayoutTransform">
                <Setter.Value>
                  <TransformGroup>
                    <RotateTransform Angle="-90"/>
                    <ScaleTransform ScaleX="1" ScaleY="-1"/>
                  </TransformGroup>
                </Setter.Value>
              </Setter>
            </Style>
          </DataGrid.CellStyle>
          <DataGrid.Columns>
            <DataGridTextColumn Header="DayOfMeeting" Binding="{Binding Path=DayOfMeeting, StringFormat=d}"/>
            <DataGridTextColumn Header="Toastmaster" Binding="{Binding Path=Toastmaster}"/>
            <DataGridTextColumn Header="Speaker 1" Binding="{Binding Path=Speaker1}"/>
            <DataGridTextColumn Header="Speaker 2" Binding="{Binding Path=Speaker2}"/>
            <DataGridTextColumn Header="GE" Binding="{Binding Path=GeneralEvaluator}"/>
            <DataGridTextColumn Header="Evaluator 1" Binding="{Binding Path=Evaluator1}"/>
            <DataGridTextColumn Header="Evaluator 2" Binding="{Binding Path=Evaluator2}"/>
            <DataGridTextColumn Header="TT" Binding="{Binding Path=TableTopics}"/>
            <DataGridTextColumn Header="Ah" Binding="{Binding Path=AhCounter}"/>
            <DataGridTextColumn Header="Gram" Binding="{Binding Path=Grammarian}"/>
            <DataGridTextColumn Header="Timer" Binding="{Binding Path=Timer}"/>
            <DataGridTextColumn Header="Quiz" Binding="{Binding Path=QuizMaster}"/>
            <DataGridTextColumn Header="Video" Binding="{Binding Path=Video}"/>
            <DataGridTextColumn Header="HotSeat" Binding="{Binding Path=HotSeat}"/>
            -->
        <!--public List
              <int>Attendees { get; set; }
    public MemberModel TTWinner { get; set; }
    public List
                <int>TTContestants { get; set; }-->
        <!--<DataGridTextColumn Header="Day of Meeting"/>-->
        <!--
          </DataGrid.Columns>
        </DataGrid>-->
        <StackPanel>
          <DockPanel HorizontalAlignment="Left" LastChildFill="False">
            <Button Margin="10" Width="130" Height="25" HorizontalAlignment="Left" Command="{Binding GenerateReportCmd}" Content="Generate Report" 
                  />
          </DockPanel>
        </StackPanel>
      </TabItem>
    </TabControl>
  </DockPanel>

</Window>
